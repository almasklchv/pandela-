# Generated by Django 4.2.5 on 2023-10-11 15:26

from django.conf import settings
from django.db import migrations, models
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=100, verbose_name='Имя и Фамилия')),
                ('email', models.EmailField(max_length=100, unique=True, verbose_name='Email')),
                ('username', models.CharField(max_length=100, unique=True, verbose_name='Никнейм')),
                ('bio', models.TextField(blank=True, verbose_name='Описание')),
                ('shapka', models.ImageField(blank=True, default=None, max_length=512, null=True, upload_to='shapki/', verbose_name='Шапка Профиля')),
                ('dp', models.ImageField(default='avatars/profile.png', upload_to='profiles/', verbose_name='Аватарка')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('main_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Название ссылки')),
                ('main_link', models.URLField(blank=True, db_index=True, max_length=128, null=True, unique=True, verbose_name='Главная Ссылка')),
                ('second_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Имя и Фамилия')),
                ('second_link', models.URLField(blank=True, db_index=True, max_length=128, null=True, unique=True, verbose_name='2 Ссылка')),
                ('third_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Имя и Фамилия')),
                ('third_link', models.URLField(blank=True, db_index=True, max_length=128, null=True, unique=True, verbose_name='3 Ссылка')),
                ('fourth_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Имя и Фамилия')),
                ('fourth_link', models.URLField(blank=True, db_index=True, max_length=128, null=True, unique=True, verbose_name='4 Ссылка')),
                ('fifth_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Имя и Фамилия')),
                ('fifth_link', models.URLField(blank=True, db_index=True, max_length=128, null=True, unique=True, verbose_name='5 Ссылка')),
                ('followers', models.ManyToManyField(blank=True, related_name='Follower', to=settings.AUTH_USER_MODEL)),
                ('following', models.ManyToManyField(blank=True, related_name='Following', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
        ),
    ]
